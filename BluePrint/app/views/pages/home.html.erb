<div class="graph">
	<select class="selectpicker" data-show-subtext="true" data-live-search="true">
        <option data-subtext="Rep California">Tom Foolery</option>
        <option data-subtext="Sen California">Bill Gordon</option>
        <option data-subtext="Sen Massacusetts">Elizabeth Warren</option>
        <option data-subtext="Rep Alabama">Mario Flores</option>
        <option data-subtext="Rep Alaska">Don Young</option>
        <option data-subtext="Rep California" disabled="disabled">Marvin Martinez</option>
	</select>

    <style id="css">

		body {
		  font: 300 14px 'Helvetica Neue', Helvetica;
		}
		.node rect {
		  stroke: #333;
		  fill: #fff;
		}
		g.l-100 > rect {
		  fill: #FFBC67;
		}
		g.l-200 > rect {
		  fill: #DA727E;
		}
		g.l-300 > rect {
		  fill: #AC6C82;
		}
		g.l-400 > rect {
		  fill: #685C79;
		}
		g.l-500 > rect {
		  fill: #455C7B;
		}
		.edgePath path {
		  stroke: #333;
		  fill: #333;
		  stroke-width: 2px;
		}
		.edgePath.l-100 path {
		  stroke: #FFBC67;
		}
		.edgePath.l-200 path {
		  stroke: #DA727E;
		}
		.edgePath.l-300 path {
		  stroke: #AC6C82;
		}
		.edgePath.l-400 path {
		  stroke: #685C79;
		}
		.edgePath.l-500 path {
		  stroke: #455C7B;
		}
		.l-100 > defs > marker > path {
		  fill: #FFBC67;
		}
		.l-200 > defs > marker > path {
		  fill: #DA727E;
		}
		.l-300 > defs > marker > path {
		  fill: #AC6C82;
		}
		.l-400 > defs > marker > path {
		  fill: #685C79;
		}
		.l-500 > defs > marker > path {
		  fill: #455C7B;
		}
		.node a {
		    color: white;
		    text-decoration: none;
		    font-weight: bold;
		}

	</style>

    <svg width="100%" height="70vh" style="padding: 4vh 0"><g/></svg>
  
    <script>
	

		//SETTINGS

		var API_KEY = "bM0m3C6DBipbAVWbd6EcBy9INiShTN_t";
		// we can make the db account read only
		// or just do this in rails


		var program = "Bachelor of Science (B.Sc.) - Major Computer Science (63 credits)"
		var courses = {};

		var rank = "tight-tree"

		getCourses(program);
		getPreqs(courses);
		drawGraph();


		function getCourses(program) {

		  var query = "{\"programs\":{\"$in\":[\"" + program + "\"]}}"

		  $.ajax({
		  async: false,
		  dataType: "json",
		  url: "https://api.mlab.com/api/1/databases/bluetest/collections/courses2?q=" + query + "&apiKey=" + API_KEY,
		  success: function(progCourses) {
		         //singles = data;
		         courses = progCourses;
		      }
		  });

		}


		function getPreqs(nodes) {

		  var ids = $.map(nodes, function(val) { return val.preqs; });
		  var uids = JSON.stringify(_.uniq(ids));

		  var cids = _.map(courses, 'cid');
		  var ucids = JSON.stringify(_.uniq(cids));

		  if (_.isEmpty(nodes)) {
		    return "done";
		  }

		  else {
		    var ids = $.map(nodes, function(val) { return val.preqs; });
		    var uids = JSON.stringify(_.uniq(ids));

		    var cids = _.map(courses, 'cid');
		    var ucids = JSON.stringify(_.uniq(cids));

		    var query = "{ $and: [{\"cid\":{\"$in\":" + uids + "} }, {\"cid\":{\"$nin\":" + ucids + "}} ] }"

		    $.ajax({
		    async: false,
		    dataType: "json",
		    url: "https://api.mlab.com/api/1/databases/bluetest/collections/courses2?q=" + query + "&apiKey=" + API_KEY,
		    success: function(preqs) {
		           //singles = data;
		           nodes = preqs;
		        }
		    });

		    courses = courses.concat(nodes);

		    return getPreqs(nodes);

		  }

		}

		function drawGraph() {

		// Create a new directed graph
		var g = new dagreD3.graphlib.Graph()
			.setGraph({rankdir: 'LR', align: 'DL', nodesep: 25, ranksep: 100, ranker: rank})
			.setDefaultEdgeLabel(function() { return {}; });

		for(var k in courses) {
			if (courses[k] !== undefined) {
				console.log(courses[k]);
				//change the link to a url param return from scraper (i.e. add to scraper)
				g.setNode(courses[k].cid,  { label: "<a href=http://www.mcgill.ca/study/2016-2017/courses/" + courses[k].subject + "-" + courses[k].code + " target=\"_blank\">" + courses[k].cid + "</a>", labelType: "html", class: "l-" + courses[k].code.charAt(0) + "00", rx: 5, ry: 5, overview: courses[k].overview });
			}
		}

		// Set up edges, no special attributes.
		for(var k in courses) {
			if (courses[k].preqs.length !== 0) {
				//console.log(roots[k].preqs);
				for (var j in courses[k].preqs) {
					if (_.some(courses, ['cid', courses[k].preqs[j]])) {
						console.log(courses[k].preqs[j]);
						console.log(courses[k].cid + " requires " + courses[k].preqs[j]);
						g.setEdge(courses[k].preqs[j],courses[k].cid, { class:"l-" + courses[k].code.charAt(0) + "00"})
					}
				//g.setNode(roots[k].cid,  { label: roots[k].cid,        class: "type-NP" });
				}
			}
		}

		// Create the renderer
		var render = new dagreD3.render();

		var svg = d3.select("svg"),
			inner = svg.select("g");

		// Set up zoom support
		var zoom = d3.behavior.zoom().on("zoom", function() {
			inner.attr("transform", "translate(" + d3.event.translate + ")" + "scale(" + d3.event.scale + ")");
		});
		svg.call(zoom);

		// Simple function to style the tooltip for the given node.
		var styleTooltip = function(name, description) {
			return "<p class='name'>" + name + "</p><p class='description'>" + description + "</p>";
		};

		// Run the renderer. This is what draws the final graph.
		render(inner, g);

		inner.selectAll("g.node")
			.attr("title", function(v) { return styleTooltip(v, g.node(v).overview) })
			.each(function(v) { $(this).tipsy({ gravity: "w", opacity: 1, html: true }); });

		// Center the graph
		var initialScale = 1;
		zoom
			.translate([100, 0])
			.scale(initialScale)
			.event(svg);

		}

	</script>
</div>
